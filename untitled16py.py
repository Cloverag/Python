# -*- coding: utf-8 -*-
"""Untitled16.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lDw_IJ69zpT3JaVUkNp7E_xMFyBlOB9N
"""

import numpy as np
import pandas as pd
import datetime as dt
import matplotlib.pyplot as plt
import seaborn as sns
import folium
import geopandas as gpd
import plotly.express as px
from matplotlib.font_manager import FontProperties
from IPython.display import HTML as html_print
from termcolor import colored
from scipy import stats

pd.set_option('display.max_columns', None)
#pd.set_option('display.max_rows', None)
pd.set_option('display.width', None)
pd.set_option('display.float_format', lambda x: '%.3f' % x)

df_3 = pd.read_csv('03 modern-renewable-prod.csv')

df_3.head()

df_3.tail()

def print_section_title(title):
    print(colored(title, 'blue', attrs=['bold', 'underline']))

def display_head_and_tail(dataframe, head=5):
    display(dataframe.head(head).style.set_caption("Head"))
    display(dataframe.tail(head).style.set_caption("Tail"))

def display_na(dataframe):
    na_df = dataframe.isnull().sum().reset_index()
    na_df.columns = ['Column', 'Number of NA']
    display(na_df.style.set_caption("Number of NA Values"))

def display_quantiles(dataframe):
    quantiles_df = dataframe.describe([0, 0.05, 0.50, 0.95, 0.99, 1]).T
    display(quantiles_df.style.format("{:.2f}").set_caption("Quantiles"))

def check_df(dataframe, head=5):
    print_section_title('Shape')
    print(dataframe.shape)
    print_section_title('Types')
    print(dataframe.dtypes.to_frame('Data Type').style.set_caption("Data Types"))
    print_section_title('Head & Tail')
    display_head_and_tail(dataframe, head)
    print_section_title('NA Values')
    display_na(dataframe)
    print_section_title('Quantiles')
    display_quantiles(dataframe)

check_df(df_3)

df_3 = df_3.drop(columns=['Code'])

df_3.head()

df_3['Total Renewable (TWh)'] = df_3[['Electricity from wind (TWh)', 'Electricity from hydro (TWh)', 'Electricity from solar (TWh)', 'Other renewables including bioenergy (TWh)']].sum(axis=1)

colors = sns.color_palette("husl")

fig, ax = plt.subplots(figsize=(20, 8))

sns.lineplot(x='Year', y='Total Renewable (TWh)', data=df_3, marker='o', color=colors[0], ax=ax, label='Total Renewable Energy')

max_point = df_3[df_3['Total Renewable (TWh)'] == df_3['Total Renewable (TWh)'].max()]
ax.annotate(f"Max: {max_point['Year'].values[0]}",
            xy=(max_point['Year'].values[0], max_point['Total Renewable (TWh)'].values[0]),
            xytext=(-50, 50),
            textcoords='offset points',
            arrowprops=dict(arrowstyle='->', color='black', lw=1),
            fontsize=12)

plt.title('Total Renewable Energy Production Over the Years', fontsize=16, fontweight='bold')
plt.xlabel('Year', fontsize=12, fontweight='bold')
plt.ylabel('Total Renewable Energy (TWh)', fontsize=12, fontweight='bold')

plt.grid(True, linestyle='--', alpha=0.6)

plt.legend(fontsize=12)
ax.axvspan(max_point['Year'].values[0] - 1, max_point['Year'].values[0] + 1, alpha=0.2, color='yellow')

font = FontProperties()
font.set_weight('bold')
ax.set_xticks(ax.get_xticks())
ax.set_yticks(ax.get_yticks())
ax.set_xticklabels(ax.get_xticks(), fontproperties=font)
ax.set_yticklabels(ax.get_yticks(), fontproperties=font)

plt.xticks(rotation=45, fontsize=12, fontweight='bold')
plt.yticks(fontsize=12, fontweight='bold')
plt.tight_layout()
plt.show()

energy_types = ['Electricity from wind (TWh)', 'Electricity from hydro (TWh)', 'Electricity from solar (TWh)', 'Other renewables including bioenergy (TWh)']

total_renewable_by_source_yearly = df_3.groupby('Year')[energy_types].sum().reset_index()

colors = ['dodgerblue', 'limegreen', 'gold', 'tomato']

plt.figure(figsize=(20, 8))
plt.stackplot(total_renewable_by_source_yearly['Year'],
              total_renewable_by_source_yearly['Electricity from wind (TWh)'],
              total_renewable_by_source_yearly['Electricity from hydro (TWh)'],
              total_renewable_by_source_yearly['Electricity from solar (TWh)'],
              total_renewable_by_source_yearly['Other renewables including bioenergy (TWh)'],
              labels=['Electricity from wind (TWh)', 'Electricity from hydro (TWh', 'Electricity from solar (TWh)', 'Other renewables including bioenergy (TWh)'], colors=colors)

plt.title('Total Renewable Energy Production by Source Over the Years')
plt.xlabel('Year')
plt.ylabel('Production (TWh)')
plt.legend(loc='upper left', title='Energy Sources')
plt.grid(True)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

top_countries_by_source = {}
for energy_type in energy_types:
    top_countries = latest_data.sort_values(by=energy_type, ascending=False).head(5)
    top_countries_by_source[energy_type] = top_countries[['Entity', energy_type]]

fig, axes = plt.subplots(2, 2, figsize=(20, 16))
for i, (energy_type, df) in enumerate(top_countries_by_source.items()):
    ax = axes[i // 2, i % 2]
    sns.barplot(x=df[energy_type], y=df['Entity'], ax=ax, palette="viridis")
    ax.set_title(f'Top 5 Ãœlkeler - {energy_type}')
    ax.set_xlabel('Ãœretim (TWh)')
    ax.set_ylabel('Ãœlke')

plt.tight_layout()
plt.show()

energy_types = ['Electricity from wind (TWh)', 'Electricity from hydro (TWh)',
                'Electricity from solar (TWh)', 'Other renewables including bioenergy (TWh)']

total_renewable_comparison = df_3.groupby('Year')[energy_types].sum()
growth_rates = total_renewable_comparison.pct_change().multiply(100)

plt.figure(figsize=(20, 8))

palette = sns.color_palette("tab10", len(energy_types))

for i, energy_type in enumerate(energy_types):
    sns.lineplot(data=growth_rates, x=growth_rates.index, y=energy_type, label=energy_type, color=palette[i])

plt.title('Annual Growth Rates in Renewable Energy Use', fontsize=14, fontweight='bold')
plt.xlabel('Year', fontsize=12)
plt.ylabel('Growth (%)', fontsize=12)

plt.legend(title='Energy Sources')
plt.grid(True)

plt.xticks(rotation=45)
plt.tight_layout()

plt.show()

selected_countries = ['Turkey', 'United States', 'China', 'Germany', 'Brazil', 'India', 'South Africa']

regional_data = latest_data[latest_data['Entity'].isin(selected_countries)]

fig = px.bar(regional_data, x='Entity', y='Total Renewable (TWh)', color='Entity',
             title='Regional Renewable Energy Production',
             labels={'Entity': 'Country', 'Total Renewable (TWh)': 'Total Renewable Energy Generation (TWh)'})

fig.show()

developing_countries = ['India', 'Brazil', 'Nigeria', 'Vietnam', 'Indonesia', 'Turkey']

developing_countries_data = df_3[df_3['Entity'].isin(developing_countries)]

plt.figure(figsize=(20, 10))

for country in developing_countries:
    country_data = developing_countries_data[developing_countries_data['Entity'] == country]
    plt.plot(country_data['Year'], country_data['Total Renewable (TWh)'], label=country, marker='o')
plt.title('Renewable Energy Trends in Developing Countries', fontsize=16, fontweight='bold')
plt.xlabel('Year', fontsize=14, fontweight='bold')
plt.ylabel('Total Renewable Energy Generation (TWh)', fontsize=14, fontweight='bold')
plt.legend()
plt.grid(True)
plt.xticks(rotation=45)
plt.xticks(fontsize=12, fontweight='bold')
plt.yticks(fontsize=12, fontweight='bold')
plt.tight_layout()
plt.show()

developed_countries = ['China', 'United States', 'India', 'Germany', 'Brazil', 'South Africa', 'Australia', 'Russia']

developed_countries_data = df_3[df_3['Entity'].isin(developed_countries)]

plt.figure(figsize=(15, 10))

for country in developed_countries:
    country_data = developed_countries_data[developed_countries_data['Entity'] == country]
    plt.plot(country_data['Year'], country_data['Total Renewable (TWh)'], label=country, marker='o')

plt.title('Renewable Energy Trends in Developed Countries')
plt.xlabel('Year')
plt.ylabel('Total Renewable Energy Generation (TWh)')
plt.legend()
plt.grid(True)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

global_renewable_production = df_3.groupby('Year')[energy_types].sum()

renewable_share = global_renewable_production.div(global_renewable_production.sum(axis=1), axis=0) * 100

colors = px.colors.qualitative.Plotly

fig = px.line(
    renewable_share,
    x=renewable_share.index,
    y=energy_types,
    labels={'index': 'Year', 'value': 'Percentage in Total Production (%)'},
    title='Relationship Between Renewable Energy Sources'
)
for i, energy_type in enumerate(energy_types):
    fig.data[i].line.color = colors[i]

fig.update_layout(legend_title_text='Energy Sources')
fig.show()

turkey_data = df_3[df_3['Entity'] == 'Turkey']

start_year = 2000
end_year = 2023

data_year_range = turkey_data[(turkey_data['Year'] >= start_year) & (turkey_data['Year'] < end_year)]

sources = ['Electricity from wind (TWh)', 'Electricity from hydro (TWh)', 'Electricity from solar (TWh)', 'Other renewables including bioenergy (TWh)']

energy_production = data_year_range[sources].sum()

energy_df = pd.DataFrame({'Source': sources, 'Production': energy_production})
energy_df = energy_df.sort_values(by='Production', ascending=False)
fig = px.bar(
    energy_df,
    x='Source',
    y='Production',
    title=f"Turkey's Electricity Generation by Energy Sources between {start_year}-{end_year-1}",
    labels={'Production': 'Electricity Generation (TWh)'}
)

colors = px.colors.qualitative.Plotly[:len(sources)]
fig.update_traces(marker=dict(color=colors))

fig.show()

sources = ['Electricity from wind (TWh)', 'Electricity from hydro (TWh)', 'Electricity from solar (TWh)', 'Other renewables including bioenergy (TWh)']

turkey_data = df_3[df_3['Entity'] == 'Turkey']

years = [2018, 2019, 2020, 2021]

plt.figure(figsize=(20, 20))
for i, year in enumerate(years):
    data_year = turkey_data[turkey_data['Year'] == year]
    energy_production = data_year[sources].values[0]
    plt.subplot(2, 2, i+1)
    patches, texts, autotexts = plt.pie(energy_production, labels=sources, autopct='%1.1f%%', startangle=140)

    for text in texts:
        text.set_fontsize(12)
        text.set_weight('bold')
    for autotext in autotexts:
        autotext.set_fontsize(12)
        autotext.set_weight('bold')

    plt.title(f'Electricity Production Distribution in Turkey for the Year {year}', fontsize=14, fontweight='bold')

plt.tight_layout()
plt.show()

renewable_sources = ['Electricity from wind (TWh)', 'Electricity from hydro (TWh)', 'Electricity from solar (TWh)', 'Other renewables including bioenergy (TWh)']
selected_year = 2021
countries = ['Turkey', 'Germany', 'United Kingdom', 'Greece', 'France', 'Italy', 'Spain', 'Netherlands', 'Sweden', 'Poland', 'Portugal']

filtered_data = df_3[(df_3['Year'] == selected_year) & (df_3['Entity'].isin(countries))]

fig = px.bar(filtered_data, x='Entity', y=renewable_sources,
             title=f'Comparison of Electricity Generation in European Countries in {selected_year}',
             labels={'Entity': 'Countries', 'value': 'Electricity Generation (TWh)'},
             color_discrete_sequence=['green', 'blue', 'yellow', 'brown'])
fig.update_layout(xaxis_tickangle=-45, xaxis_title=None, yaxis_title='Electricity Generation (TWh)',
                  title_font=dict(size=20))

fig.show()

selected_year = 2021
neighboring_countries = ['Turkey', 'Greece', 'Bulgaria', 'Georgia', 'Armenia', 'Azerbaijan', 'Iran', 'Iraq', 'Syria']
renewable_sources = ['Electricity from wind (TWh)', 'Electricity from hydro (TWh)', 'Electricity from solar (TWh)', 'Other renewables including bioenergy (TWh)']

filtered_data = df_3[(df_3['Year'] == selected_year) & (df_3['Entity'].isin(neighboring_countries))]

colors = ['green', 'blue', 'yellow', 'brown']
fig = px.bar(filtered_data, x='Entity', y=renewable_sources,
             title=f'Comparison of Turkey\'s Electricity Generation with Its Neighboring Countries in {selected_year}',
             labels={'Entity': 'Countries', 'value': 'Electricity Generation (TWh)'},
             color_discrete_sequence=colors)

fig.update_layout(xaxis_tickangle=-45, xaxis_title=None, yaxis_title='Electricity Generation (TWh)',
                  title_font=dict(size=20))

fig.show()

energy_sources = ['Electricity from wind (TWh)', 'Electricity from hydro (TWh)',
                  'Electricity from solar (TWh)', 'Other renewables including bioenergy (TWh)']

total_generation = df_3[energy_sources].sum()
total_generation = total_generation.sort_values(ascending=False)

total_generation_df = pd.DataFrame({'Energy Source': total_generation.index, 'Electricity Generation (TWh)': total_generation.values})

colors = {
    'Electricity from wind (TWh)': 'green',
    'Electricity from hydro (TWh)': 'blue',
    'Electricity from solar (TWh)': 'yellow',
    'Other renewables including bioenergy (TWh)': 'brown',
}

total_generation_df['Color'] = total_generation_df['Energy Source'].map(colors)

fig = px.bar(total_generation_df, x='Energy Source', y='Electricity Generation (TWh)',
             title='Electricity Generation by Energy Sources',
             labels={'Energy Source': 'Energy Source', 'Electricity Generation (TWh)': 'Electricity Generation (TWh)'},
             color='Color')
fig.update_layout(title_font=dict(size=20),
                  xaxis_title_font=dict(size=16),
                  yaxis_title_font=dict(size=16))

fig.show()

selected_regions = ['Africa', 'Asia', 'Europe', 'North America', 'South America']
filtered_data = df_3[df_3['Entity'].isin(selected_regions)]

grouped_data = filtered_data.groupby(['Year', 'Entity']).sum().reset_index()

sns.set(style="whitegrid")
plt.figure(figsize=(17, 12))

plt.subplot(2, 2, 1)
sns.lineplot(data=grouped_data, x='Year', y='Electricity from wind (TWh)', hue='Entity')
plt.title('Electricity from Wind by Region', fontweight='bold')
plt.ylabel('Electricity (TWh)', fontweight='bold')
plt.xlabel('Year', fontweight='bold')
plt.xticks(fontweight='bold')
plt.yticks(fontweight='bold')

plt.subplot(2, 2, 2)
sns.lineplot(data=grouped_data, x='Year', y='Electricity from hydro (TWh)', hue='Entity')
plt.title('Electricity from Hydro by Region', fontweight='bold')
plt.ylabel('Electricity (TWh)', fontweight='bold')
plt.xlabel('Year', fontweight='bold')
plt.xticks(fontweight='bold')
plt.yticks(fontweight='bold')
plt.subplot(2, 2, 3)
sns.lineplot(data=grouped_data, x='Year', y='Electricity from solar (TWh)', hue='Entity')
plt.title('Electricity from Solar by Region', fontweight='bold')
plt.ylabel('Electricity (TWh)', fontweight='bold')
plt.xlabel('Year', fontweight='bold')
plt.xticks(fontweight='bold')
plt.yticks(fontweight='bold')

plt.subplot(2, 2, 4)
sns.lineplot(data=grouped_data, x='Year', y='Other renewables including bioenergy (TWh)', hue='Entity')
plt.title('Other Renewable Energy by Region', fontweight='bold')
plt.ylabel('Electricity (TWh)', fontweight='bold')
plt.xlabel('Year', fontweight='bold')
plt.xticks(fontweight='bold')
plt.yticks(fontweight='bold')
plt.tight_layout()
plt.show()